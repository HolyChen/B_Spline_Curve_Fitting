//
// Created by haochuanchen on 18-4-19.
//

#include "../src/curve/BSplineCurve.h"
#include <gmock/gmock.h>

using namespace testing;
using namespace std;

namespace
{

TEST(BSplineCurve_create, control_points_only)
{
    double ctrlpts_src[][3] ={{ 0,  0,  0},
                              {-1,  3,  2},
                              { 3,  3, -2},
                              { 2, -1,  1},
                              { 7, -1,  1},
                              { 6,  2, -1}};
    using _Dt = double;
    using _Pt = CurvePoint<_Dt, BSplinePointTrait<_Dt>>;


    std::vector<Vertex<_Dt>> ctrlpts;

    for (int i = 0; i < 6; i++)
    {
        ctrlpts.emplace_back(Vector3X<_Dt>(ctrlpts_src[i][0], ctrlpts_src[i][1], ctrlpts_src[i][2]));
    }

    BSplineCurve<_Pt> bc(3, ctrlpts);

    EXPECT_EQ(3, bc.get_degree());

    auto& control_points = bc.get_control_points();
    for (int i = 0; i < control_points.size(); i++)
    {
        EXPECT_LT((control_points[i] - ctrlpts[i]).length(), 0.001);
    }

    _Dt predict_knots[] = {0.0, 0.0, 0.0, 0.0, 1.0 / 3.0, 2.0 / 3.0, 1.0, 1.0, 1.0, 1.0};
    auto &knots = bc.get_knot_vector();

    EXPECT_EQ(10, knots.size());

    for (int i = 0; i < 10; i++)
    {
        EXPECT_DOUBLE_EQ(knots[i], predict_knots[i]);
    }
}

TEST(BSplineCurve_create, control_points_and_knots)
{
    double ctrlpts_src[][3] ={{ 0,  0,  0},
                              {-1,  3,  2},
                              { 3,  3, -2},
                              { 2, -1,  1},
                              { 7, -1,  1},
                              { 6,  2, -1}};
    using _Dt = double;
    using _Pt = CurvePoint<_Dt, BSplinePointTrait<_Dt>>;


    std::vector<Vertex<_Dt>> ctrlpts;

    for (int i = 0; i < 6; i++)
    {
        ctrlpts.emplace_back(Vector3X<_Dt>(ctrlpts_src[i][0], ctrlpts_src[i][1], ctrlpts_src[i][2]));
    }

    std::vector<_Dt> input_knots = {
            1.0, 1.0, 1.0, 1.0, 2.0, 5.0, 8.0, 8.0, 8.0, 8.0
    };

    BSplineCurve<_Pt> bc(3, ctrlpts, input_knots);

    EXPECT_EQ(3, bc.get_degree());

    auto& control_points = bc.get_control_points();
    for (int i = 0; i < control_points.size(); i++)
    {
        EXPECT_LT((control_points[i] - ctrlpts[i]).length(), 0.001);
    }

    _Dt predict_knots[] = {0.0, 0.0, 0.0, 0.0, 1.0 / 7, 4.0 / 7, 1.0, 1.0, 1.0, 1.0};
    auto &knots = bc.get_knot_vector();

    EXPECT_EQ(10, knots.size());

    for (int i = 0; i < 10; i++)
    {
        EXPECT_DOUBLE_EQ(knots[i], predict_knots[i]);
    }
}

}

namespace // BSplineCurve recalculate
{

TEST(BSplineCurve_recalculate, control_points_only)
{
    double ctrlpts_src[][3] ={{ 0,  0,  0},
                              {-1,  3,  2},
                              { 3,  3, -2},
                              { 2, -1,  1},
                              { 7, -1,  1},
                              { 6,  2, -1}};

    double pts[][3] = {{0.0, 0.0, 0.0},
                        {-0.08202070720664752, 0.2619884058619634, 0.1693651765774145},
                        {-0.14851489273869678, 0.5081517116662169, 0.3180188026283358},
                        {-0.20015765516457784, 0.7388680578411148, 0.4468520280313205},
                        {-0.23762409305272103, 0.9545155848150128, 0.5567560026649259},
                        {-0.26158930497155614, 1.1554724330162647, 0.6486218764077082},
                        {-0.2727283894895136, 1.342116742873226, 0.7233407991382242},
                        {-0.2717164451750233, 1.5148266548142513, 0.781803920735031},
                        {-0.2592285705965154, 1.6739803092676955, 0.8249023910766854},
                        {-0.23593986432242006, 1.819955846661913, 0.8535273600417437},
                        {-0.2025254249211673, 1.9531314074252588, 0.8685699775087629},
                        {-0.15966035096118722, 2.0738851319860876, 0.8709213933562997},
                        {-0.1080197410109101, 2.1825951607727543, 0.8614727574629111},
                        {-0.04827869363876588, 2.2796396342136145, 0.8411152197071537},
                        {0.018887692586815427, 2.3653966927370216, 0.8107399299675843},
                        {0.0928043190974032, 2.4402444767713303, 0.7712380381227594},
                        {0.172796087324568, 2.5045611267448966, 0.723500694051236},
                        {0.25818789869987935, 2.558724783086075, 0.6684190476315709},
                        {0.3483046546549069, 2.60311358622322, 0.6068842487423212},
                        {0.44247125662122133, 2.638105676584687, 0.5397874472620429},
                        {0.5400126060303918, 2.66407919459883, 0.4680197930692933},
                        {0.6402536043139881, 2.681412280694004, 0.39247243604262905},
                        {0.7425191529035812, 2.690483075298564, 0.3140365260606067},
                        {0.8461341532307398, 2.691669718840864, 0.2336032130017831},
                        {0.9504235067270339, 2.685350351749259, 0.15206364674471545},
                        {1.0547121148240342, 2.671903114452105, 0.07030897716795993},
                        {1.1583248789533098, 2.651706147377756, -0.01076964584992654},
                        {1.2605867005464313, 2.625137590954567, -0.09028107243038694},
                        {1.3608224810349685, 2.5925755856108923, -0.1673341526948649},
                        {1.4583571218504896, 2.5543982717750873, -0.24103773676480267},
                        {1.5525155244245674, 2.510983789875507, -0.31050067476164506},
                        {1.6426225901887694, 2.462710280340504, -0.37483181680683453},
                        {1.7280032205746667, 2.4099558835984363, -0.43314001302181415},
                        {1.807982317013829, 2.3530987400776566, -0.4845341135280271},
                        {1.8819395937787846, 2.2925088598599457, -0.5281838760020482},
                        {1.9498843175828535, 2.2284628719973716, -0.5639586113514939},
                        {2.012228316230488, 2.1611776939647322, -0.5921749528891508},
                        {2.0693899668991214, 2.0908692717733643, -0.6131568115344549},
                        {2.1217876467661876, 2.0177535514346054, -0.6272280982068422},
                        {2.169839733009119, 1.9420464789597953, -0.6347127238257487},
                        {2.213964602805348, 1.8639640003602698, -0.6359345993106106},
                        {2.254580633332309, 1.7837220616473672, -0.6312176355808634},
                        {2.2921062017674343, 1.701536608832426, -0.6208857435559436},
                        {2.3269596852881578, 1.6176235879267824, -0.605262834155287},
                        {2.359559461071911, 1.5321989449417746, -0.5846728182983297},
                        {2.3903239062961283, 1.4454786258887413, -0.5594396069045078},
                        {2.419671398138243, 1.3576785767790196, -0.5298871108932574},
                        {2.448020313775687, 1.2690147436239467, -0.49633924118401385},
                        {2.475789030385893, 1.1797030724348605, -0.45911990869621366},
                        {2.5033959251462963, 1.0899595092230991, -0.4185530243492928},
                        {2.531259375234328, 0.9999999999999999, -0.3749624990626876},
                        {2.5597977578274222, 0.9100404907769009, -0.3286722437558334},
                        {2.5894294501030117, 0.8202969275651391, -0.28000616934816663},
                        {2.62057282923853, 0.730985256376053, -0.22928818675912327},
                        {2.653646272411409, 0.6423214232209802, -0.17684220690813932},
                        {2.689068156799082, 0.5545213741112578, -0.12299214071465071},
                        {2.7272568595789837, 0.4678010550582241, -0.06806189909809349},
                        {2.7686307579285447, 0.3823764120732169, -0.012375392977903632},
                        {2.8136082290252005, 0.2984633911675745, 0.04374346672648202},
                        {2.8626076500463826, 0.21627793835263248, 0.09997076909562903},
                        {2.9160473981695247, 0.1360359996397303, 0.1559826032101002},
                        {2.974345850572059, 0.05795352104020493, 0.21145505815046015},
                        {3.0379213844314203, -0.017753551434605885, 0.26606422299727284},
                        {3.1071923769250405, -0.09086927177336407, 0.3194861868311018},
                        {3.1825772052303525, -0.16117769396473206, 0.3713970387325113},
                        {3.26449424652479, -0.2284628719973721, 0.4214728677820653},
                        {3.353361877985785, -0.29250885985994657, 0.46938976306032765},
                        {3.4495911996207576, -0.3530987400776572, 0.5148242977057799},
                        {3.553146015869957, -0.4099558835984369, 0.5574827977636204},
                        {3.6632906199136865, -0.4627102803405049, 0.5971181189001599},
                        {3.779228401031393, -0.5109837898755069, 0.6334871679465627},
                        {3.9001627485025145, -0.5543982717750876, 0.6663468517339927},
                        {4.0252970516065, -0.5925755856108926, 0.6954540770936146},
                        {4.153834699622788, -0.6251375909545671, 0.7205657508565926},
                        {4.284979081830826, -0.6517061473777563, 0.7414387798540911},
                        {4.417933587510055, -0.6719031144521054, 0.7578300709172744},
                        {4.5519016059399195, -0.6853503517492593, 0.7694965308773065},
                        {4.686086526399862, -0.6916697188408636, 0.7761950665653522},
                        {4.819691738169326, -0.6904830752985631, 0.7776825848125755},
                        {4.9519206305277566, -0.6814122806940034, 0.7737159924501407},
                        {5.081976592754595, -0.6640791945988296, 0.7640521963092121},
                        {5.209063014129285, -0.6381056765846866, 0.7484481032209542},
                        {5.332383283931272, -0.6031135862232202, 0.7266606200165314},
                        {5.451140791439997, -0.5587247830860751, 0.6984466535271076},
                        {5.564538925934901, -0.5045611267448973, 0.6635631105838476},
                        {5.671781076695434, -0.4402444767713308, 0.6217668980179152},
                        {5.772070633001036, -0.3653966927370212, 0.5728149226604748},
                        {5.864610984131149, -0.2796396342136141, 0.5164640913426911},
                        {5.948605519365218, -0.1825951607727544, 0.45247131089572795},
                        {6.023257627982686, -0.07388513198608737, 0.38059348815074984},
                        {6.0877706992629985, 0.04686859257474163, 0.3005875299389213},
                        {6.141348122485596, 0.18004415333808765, 0.2122103430914063},
                        {6.183193286929921, 0.3260196907323053, 0.11521883443936931},
                        {6.2125095818754215, 0.4851733451857495, 0.009369910813974647},
                        {6.228500396601538, 0.6578832571267751, -0.10557952095361356},
                        {6.230369120387712, 0.8445275669837367, -0.22987255403223084},
                        {6.217319142513389, 1.0454844151849865, -0.36375228159071105},
                        {6.188553852258015, 1.2611319421588845, -0.5074617967978934},
                        {6.143276638901028, 1.4918482883337827, -0.6612441928226118},
                        {6.080690891721876, 1.7380115941380363, -0.8253425628337022},
                        {6.0, 2.0, -1.0}};


    using _Dt = double;
    using _Pt = CurvePoint<_Dt, BSplinePointTrait<_Dt>>;


    std::vector<Vector3X<_Dt>> ctrlpts;

    for (int i = 0; i < 6; i++)
    {
        ctrlpts.emplace_back(Vector3X<_Dt>(ctrlpts_src[i][0], ctrlpts_src[i][1], ctrlpts_src[i][2]));
    }

    BSplineCurve<_Pt> bc(3, ctrlpts);

    bc.recalculate_curve(0.01);




    auto vertices = bc.get_vertices();

    EXPECT_EQ(101, vertices.size());

    for (int i = 0; i < vertices.size(); i++)
    {
        EXPECT_DOUBLE_EQ(0.01 * i, vertices[i].trait.u) << "i = " << i;

        EXPECT_LT(std::abs((Vector3X<_Dt>(pts[i][0], pts[i][1], pts[i][2]) - (vertices[i].vertex)).length()),
                  0.001);
    }
}

TEST(BSplineCurve_recalculate, control_points_and_knots)
{
    double ctrlpts_src[][3] ={{ 0,  0,  0},
                              {-1,  3,  2},
                              { 3,  3, -2},
                              { 2, -1,  1},
                              { 7, -1,  1},
                              { 6,  2, -1}};

    double pts[][3] = {{0.0, 0.0, 0.0},
                       {0.055898109181416474, 2.8698420781919802, 0.9415390450462163},
                       {1.4438095919579308, 2.622287034227246, -0.25199601927590504},
                       {2.2332416037158005, 1.9728418820785458, -0.6580761554458503},
                       {2.6659776005951157, 1.16002800140007, -0.47605460076994044},
                       {3.049708697106907, 0.3472141207215942, -3.643888883880786e-06},
                       {3.6894511311768823, -0.302231343474225, 0.4767477892669386},
                       {4.657740254331142, -0.6249670955786786, 0.7254784719639831},
                       {5.617835222092651, -0.4576995855345061, 0.6312072520585194},
                       {6.1913753616020575, 0.3628598814083632, 0.09051935344053064},
                       {6.0, 2.0, -1.0}};


    using _Dt = double;
    using _Pt = CurvePoint<_Dt, BSplinePointTrait<_Dt>>;


    std::vector<Vector3X<_Dt>> ctrlpts;

    for (int i = 0; i < 6; i++)
    {
        ctrlpts.emplace_back(Vector3X<_Dt>(ctrlpts_src[i][0], ctrlpts_src[i][1], ctrlpts_src[i][2]));
    }

    std::vector<_Dt> knots = {
            1.0, 1.0, 1.0, 1.0, 2.0, 5.0, 8.0, 8.0, 8.0, 8.0
    };

    BSplineCurve<_Pt> bc(3, ctrlpts, knots);

    bc.recalculate_curve(0.1);

    auto vertices = bc.get_vertices();

    EXPECT_EQ(11, vertices.size());

    for (int i = 0; i < vertices.size(); i++)
    {
        EXPECT_DOUBLE_EQ(0.1 * i, vertices[i].trait.u) << "i = " << i;

        EXPECT_LT(std::abs((Vector3X<_Dt>(pts[i][0], pts[i][1], pts[i][2]) - (vertices[i].vertex)).length()),
                  0.001);
    }
}

}